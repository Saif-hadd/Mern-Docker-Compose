name: CI - Build & Push Docker Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Nécessaire pour SonarCloud

      # Installer Snyk CLI
      - name: Install Snyk CLI
        run: npm install -g snyk

      # Tester Snyk dans la PR
      - name: Test Snyk in Pull Request
        if: github.event_name == 'pull_request'
        run: snyk monitor --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Installer jq pour analyser les résultats Snyk
      - name: Install jq
        run: sudo apt-get install -y jq

      # Commenter sur PR avec les résultats Snyk
      - name: Comment on PR with Snyk issues
        if: github.event_name == 'pull_request'
        run: |
          PR_COMMENT="Snyk Security Scan Report: \n\n"
          
          # Run snyk test and save JSON output
          snyk test --all-projects --json > snyk-results.json || true
          
          # Debug: Print raw JSON
          echo "Snyk JSON output:"
          cat snyk-results.json
          
          # Parse vulnerabilities
          ISSUES=$(jq -r '.[] | .vulnerabilities[]? | "- \(.name) (\(.severity))\n  - \(.packageManager) package: \(.packageName)@\(.version)\n  - More info: \(.url)"' snyk-results.json || echo "No vulnerabilities found")
          
          # Append issues to comment
          if [ -n "$ISSUES" ]; then
            PR_COMMENT+="$ISSUES"
          else
            PR_COMMENT+="No vulnerabilities detected."
          fi
          
          # Debug: Print final comment
          echo "Comment content: $PR_COMMENT"
          
          # Post comment to PR
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -d "{\"body\": \"${PR_COMMENT}\"}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/comments"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Backend Security Scans and Fixes
      - name: Run Snyk Security Scan (Backend)
        run: |
          cd mern/backend
          snyk test --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Fix vulnerabilities with Snyk (Backend)
        run: |
          cd mern/backend
          snyk protect || true  # Continue even if no fixes are applied
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Monitor with Snyk (Backend)
        run: |
          cd mern/backend
          snyk monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Frontend Security Scans and Fixes
      - name: Run Snyk Security Scan (Frontend)
        run: |
          cd mern/frontend
          snyk test --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Fix vulnerabilities with Snyk (Frontend)
        run: |
          cd mern/frontend
          snyk protect || true  # Continue even if no fixes are applied
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Monitor with Snyk (Frontend)
        run: |
          cd mern/frontend
          snyk monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Docker Build and Push
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Backend Build & Scan
      - name: Build and Load Backend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }} ./mern/backend
          docker images

      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.50.1/trivy_0.50.1_Linux-64bit.tar.gz
          tar zxvf trivy_0.50.1_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/
          trivy --version

      - name: Scan Backend Docker Image for Vulnerabilities
        run: |
          trivy image --scanners vuln --severity HIGH,CRITICAL ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}

      - name: Install SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          mv sonar-scanner-5.0.1.3006-linux sonar-scanner

      - name: Run SonarCloud Analysis for Backend
        run: |
          ./sonar-scanner/bin/sonar-scanner -Dsonar.projectKey=Saif-hadd_Mern-Docker-Compose -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.sources=./mern/backend -Dsonar.sourceEncoding=UTF-8
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Push Backend Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}

      # Frontend Build & Scan
      - name: Build and Load Frontend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }} ./mern/frontend
          docker images

      - name: Scan Frontend Docker Image for Vulnerabilities
        run: |
          trivy image --scanners vuln --severity HIGH,CRITICAL ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

      - name: Run SonarCloud Analysis for Frontend
        run: |
          ./sonar-scanner/bin/sonar-scanner -Dsonar.projectKey=Saif-hadd_Mern-Docker-Compose -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.sources=./mern/frontend -Dsonar.sourceEncoding=UTF-8
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Push Frontend Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

      # Reporting and Notifications
      - name: Notify Slack on Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Build succeeded for commit ${{ github.sha }}! Backend & Frontend images pushed to Docker Hub."}' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Build failed for commit ${{ github.sha }}! Check the logs for details."}' ${{ secrets.SLACK_WEBHOOK_URL }}